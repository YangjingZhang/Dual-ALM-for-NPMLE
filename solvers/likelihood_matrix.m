%% generate the matrix L
%% Input: observations X \in R^{n*d}
%%        grid points U \in R^{m*d}
%%        SIGMA \in R^{1*d*n}
%%        normalizerows = 1, then max number of each row of output L is 1
%% Output: L \in R^{n*m}
%%         L_ij = mvnpdf(X(i,:) - U(j,:),SIGMA_i)
%%         rowmax(i) = max(L_ij,j=1,...,m)
%%         if normalizerows = 1, L(i,:) = Lorig(i,:)/rowmax(i);
%%         elseif normalizerows = 0, L = Lorig.
%%         removeind denotes the index set of observations removed
function [L,rowmax,removeind] = likelihood_matrix(X,U,SIGMA,normalizerows,restrict_dist)
if ~exist('normalizerows','var')
    normalizerows = 0;
end
if ~exist('restrict_dist','var')
    restrict_dist = 0;
end
n = size(X,1);
m = size(U,1);
L = zeros(n,m);
rowmax = zeros(n,1);
if restrict_dist
    tiny = 1e-9;
else
    tiny = 1e-150;
end
cnt = 0;
removeind = [];
sz = ndims(SIGMA);
for i = 1:n
   XI = X(i,:); 
   if sz == 3
       SIG = SIGMA(1,:,i); 
   elseif sz == 2
       SIG = SIGMA;
   else
       SIG = [];
   end
   tmp = mvnpdf(XI - U,[],SIG); % generate the ith row of L
   maxtmp = max(tmp);
   if maxtmp > tiny % if the row is not a row of all tiny numbers
      cnt = cnt + 1;
      rowmax(cnt) = maxtmp;
      if normalizerows
        L(cnt,:) = max(tmp,tiny)/maxtmp;   
      else
        L(cnt,:) = max(tmp,tiny); 
      end
   else
       removeind = union(removeind,i);
   end
end
L(cnt + 1:end,:) = [];
rowmax(cnt + 1:end) = [];
end

% function L = likelihood_matrix(X,U,SIGMA)
% n = size(X,1);
% m = size(U,1);
% L = zeros(n,m);
% printyes = 1;
% if printyes
%     tstart = clock;
% end
% for j = 1:m   % generated by columns
%     L(:,j) = mvnpdf(X - U(j,:),[],SIGMA);
%     if printyes && mod(j,round(m/10)) == 0       
%         t0 = etime(clock,tstart);
%         fprintf('\ngenerating the %dth column of L ...(%3.1f sec)',j,t0);
%     end
% end
% end